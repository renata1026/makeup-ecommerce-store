{"ast":null,"code":"var _jsxFileName = \"/Users/pureg/Desktop/junoCollege/bootcamp/cohort46/juno/makeup-ecommerce-store/makeup-store/src/contexts/products.js\",\n  _s = $RefreshSig$(),\n  _s2 = $RefreshSig$();\nimport { createContext, useContext, useEffect, useState } from 'react';\nimport axios from 'axios';\nimport { defaultQueryParameters } from '../components/Makeup';\nimport { jsxDEV as _jsxDEV } from \"react/jsx-dev-runtime\";\nexport const productsContext = /*#__PURE__*/createContext({});\nexport const ProductsProvider = _ref => {\n  _s();\n  let {\n    children\n  } = _ref;\n  const [products, setProducts] = useState([]);\n  const [isLoading, setIsLoading] = useState(false);\n  const [queryParameters, setQueryParameters] = useState('');\n  const [hasFailed, setHasFailed] = useState(false);\n  // Use useEffect to fetch products from the API and update the products state when the queryParameters state changes\n  useEffect(() => {\n    // Set isLoading state to true\n    setIsLoading(true);\n    // Make an API call using axios and the query parameters\n    axios({\n      url: `https://makeup-api.herokuapp.com/api/v1/products.json?${queryParameters || defaultQueryParameters}`\n    }).then(_ref2 => {\n      let {\n        data\n      } = _ref2;\n      // Update the products state with the data from the API response and set hasFailed state to false\n      setProducts(data);\n      setHasFailed(false);\n    }).catch(() => {\n      // If the API call fails, set hasFailed state to true\n      setHasFailed(true);\n    }).finally(() => {\n      // Set isLoading state to false\n      setIsLoading(false);\n    });\n  }, [queryParameters]);\n  // Render the products context provider with the products, isLoading, setQueryParameters, and hasFailed values\n  return /*#__PURE__*/_jsxDEV(productsContext.Provider, {\n    value: {\n      products,\n      isLoading,\n      setQueryParameters,\n      hasFailed\n    },\n    children: children\n  }, void 0, false, {\n    fileName: _jsxFileName,\n    lineNumber: 39,\n    columnNumber: 5\n  }, this);\n};\n_s(ProductsProvider, \"qrx9ml5PmraNxtoIcptHsPG0IfQ=\");\n_c = ProductsProvider;\nexport const useProductsStore = () => {\n  _s2();\n  return useContext(productsContext);\n};\n_s2(useProductsStore, \"gDsCjeeItUuvgOWf1v4qoK9RF6k=\");\nvar _c;\n$RefreshReg$(_c, \"ProductsProvider\");","map":{"version":3,"names":["createContext","useContext","useEffect","useState","axios","defaultQueryParameters","productsContext","ProductsProvider","children","products","setProducts","isLoading","setIsLoading","queryParameters","setQueryParameters","hasFailed","setHasFailed","url","then","data","catch","finally","useProductsStore"],"sources":["/Users/pureg/Desktop/junoCollege/bootcamp/cohort46/juno/makeup-ecommerce-store/makeup-store/src/contexts/products.js"],"sourcesContent":["import { createContext, useContext, useEffect, useState } from 'react';\nimport axios from 'axios';\n\nimport { defaultQueryParameters } from '../components/Makeup';\n\nexport const productsContext = createContext({});\n\nexport const ProductsProvider = ({ children }) => {\n  const [products, setProducts] = useState([]);\n  const [isLoading, setIsLoading] = useState(false);\n  const [queryParameters, setQueryParameters] = useState('');\n  const [hasFailed, setHasFailed] = useState(false);\n  // Use useEffect to fetch products from the API and update the products state when the queryParameters state changes\n  useEffect(() => {\n    // Set isLoading state to true\n    setIsLoading(true);\n    // Make an API call using axios and the query parameters\n    axios({\n      url: `https://makeup-api.herokuapp.com/api/v1/products.json?${\n        queryParameters || defaultQueryParameters\n      }`,\n    })\n      .then(({ data }) => {\n        // Update the products state with the data from the API response and set hasFailed state to false\n        setProducts(data);\n        setHasFailed(false);\n      })\n      .catch(() => {\n        // If the API call fails, set hasFailed state to true\n        setHasFailed(true);\n      })\n      .finally(() => {\n        // Set isLoading state to false\n        setIsLoading(false);\n      });\n  }, [queryParameters]);\n  // Render the products context provider with the products, isLoading, setQueryParameters, and hasFailed values\n  return (\n    <productsContext.Provider\n      value={{ products, isLoading, setQueryParameters, hasFailed }}\n    >\n      {children}\n    </productsContext.Provider>\n  );\n};\n\nexport const useProductsStore = () => useContext(productsContext);\n"],"mappings":";;;AAAA,SAASA,aAAa,EAAEC,UAAU,EAAEC,SAAS,EAAEC,QAAQ,QAAQ,OAAO;AACtE,OAAOC,KAAK,MAAM,OAAO;AAEzB,SAASC,sBAAsB,QAAQ,sBAAsB;AAAC;AAE9D,OAAO,MAAMC,eAAe,gBAAGN,aAAa,CAAC,CAAC,CAAC,CAAC;AAEhD,OAAO,MAAMO,gBAAgB,GAAG,QAAkB;EAAA;EAAA,IAAjB;IAAEC;EAAS,CAAC;EAC3C,MAAM,CAACC,QAAQ,EAAEC,WAAW,CAAC,GAAGP,QAAQ,CAAC,EAAE,CAAC;EAC5C,MAAM,CAACQ,SAAS,EAAEC,YAAY,CAAC,GAAGT,QAAQ,CAAC,KAAK,CAAC;EACjD,MAAM,CAACU,eAAe,EAAEC,kBAAkB,CAAC,GAAGX,QAAQ,CAAC,EAAE,CAAC;EAC1D,MAAM,CAACY,SAAS,EAAEC,YAAY,CAAC,GAAGb,QAAQ,CAAC,KAAK,CAAC;EACjD;EACAD,SAAS,CAAC,MAAM;IACd;IACAU,YAAY,CAAC,IAAI,CAAC;IAClB;IACAR,KAAK,CAAC;MACJa,GAAG,EAAG,yDACJJ,eAAe,IAAIR,sBACpB;IACH,CAAC,CAAC,CACCa,IAAI,CAAC,SAAc;MAAA,IAAb;QAAEC;MAAK,CAAC;MACb;MACAT,WAAW,CAACS,IAAI,CAAC;MACjBH,YAAY,CAAC,KAAK,CAAC;IACrB,CAAC,CAAC,CACDI,KAAK,CAAC,MAAM;MACX;MACAJ,YAAY,CAAC,IAAI,CAAC;IACpB,CAAC,CAAC,CACDK,OAAO,CAAC,MAAM;MACb;MACAT,YAAY,CAAC,KAAK,CAAC;IACrB,CAAC,CAAC;EACN,CAAC,EAAE,CAACC,eAAe,CAAC,CAAC;EACrB;EACA,oBACE,QAAC,eAAe,CAAC,QAAQ;IACvB,KAAK,EAAE;MAAEJ,QAAQ;MAAEE,SAAS;MAAEG,kBAAkB;MAAEC;IAAU,CAAE;IAAA,UAE7DP;EAAQ;IAAA;IAAA;IAAA;EAAA,QACgB;AAE/B,CAAC;AAAC,GArCWD,gBAAgB;AAAA,KAAhBA,gBAAgB;AAuC7B,OAAO,MAAMe,gBAAgB,GAAG;EAAA;EAAA,OAAMrB,UAAU,CAACK,eAAe,CAAC;AAAA;AAAC,IAArDgB,gBAAgB;AAAA;AAAA"},"metadata":{},"sourceType":"module","externalDependencies":[]}